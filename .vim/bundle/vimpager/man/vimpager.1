.\"t
.\" Automatically generated by Pandoc 1.17.2
.\"
.TH "VIMPAGER" "1" "říjen 03, 2017" "Vimpager User Manual" ""
.hy
.SH NAME
.PP
vimpager \- pager using vim and less.vim
.SH SYNOPSIS
.PP
vimpager [options] `some file'
.PP
# or (this won't always syntax highlight as well)
.PP
cat `some file' | vimpager [options]
.PP
For vimcat see here (markdown/vimcat.md) or `man vimcat'.
.SH RUN\-TIME DEPENDENCIES
.IP \[bu] 2
vim, version >= 7.3
.IP \[bu] 2
a POSIX conformant shell, see the
.PD 0
.P
.PD
standard (http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html)
.PD 0
.P
.PD
common variants are searched for, bash is fine
.SH BUILD DEPENDENCIES
.IP \[bu] 2
sharutils or some uuencode (only if you change the \f[I]/\f[].vim
sources)
.IP \[bu] 2
pandoc (for man pages and html, optional)
.IP \[bu] 2
doctoc (for markdown TOCs, optional)
.IP \[bu] 2
bats (for tests, optional, get it from:
.PD 0
.P
.PD
<https://github.com/sstephenson/bats.git>)
.SH INSTALL
.PP
On Ubuntu or Debian, use the following to install a package:
.IP
.nf
\f[C]
git\ clone\ git://github.com/rkitover/vimpager
cd\ vimpager
sudo\ make\ install\-deb
\f[]
.fi
.PP
Otherwise use `make install' instead:
.IP
.nf
\f[C]
git\ clone\ git://github.com/rkitover/vimpager
cd\ vimpager
sudo\ make\ install
\f[]
.fi
.PP
The following make settings are supported at \f[C]make\ install\f[]
time:
.PP
.TS
tab(@);
l l.
T{
\f[B]Variable\f[]
T}@T{
\f[B]Purpose\f[]
T}
_
T{
DESTDIR
T}@T{
base dir where files will be written, for packaging
T}
T{
PREFIX
T}@T{
install prefix to configure for, e.g.
/usr/local
T}
T{
prefix
T}@T{
prefix for writing files, e.g.\ for GNU stow
T}
T{
POSIX_SHELL
T}@T{
POSIX shell to use to run the scripts
T}
.TE
.PP
If you got vimpager from the vim.org scripts section, just put it
.PD 0
.P
.PD
somewhere in your PATH, e.g.:
.IP
.nf
\f[C]
cp\ vimpager\ ~/bin
chmod\ +x\ ~/bin/vimpager
\f[]
.fi
.PP
In your ~/.bashrc add the following:
.IP
.nf
\f[C]
export\ PAGER=/usr/local/bin/vimpager
alias\ less=$PAGER
alias\ zless=$PAGER
\f[]
.fi
.SH PATHOGEN INSTALLATION
.IP
.nf
\f[C]
cd\ ~/.vim/bundle
git\ clone\ https://github.com/rkitover/vimpager.git
\f[]
.fi
.PP
If you installed using one of the above methods, you can add the runtime
to your
.PD 0
.P
.PD
\f[C]runtimepath\f[] by putting the following in your \f[C]\&.vimrc\f[]:
.IP
.nf
\f[C]
set\ rtp^=/usr/share/vimpager
\f[]
.fi
.PP
Set \f[C]PAGER\f[] and aliases as above with the path into
\f[C]~/.vim/bundle/vimpager\f[].
.PP
See Using From Vim (#using-from-vim).
.SH DESCRIPTION
.PP
A PAGER using less.vim with support for highlighting of man pages and
.PD 0
.P
.PD
many other features.
Works on most UNIX\-like systems as well as Cygwin
.PD 0
.P
.PD
and MSYS.
.PP
On GitHub: <http://github.com/rkitover/vimpager>
.PP
To use a different vimrc with vimpager, put your settings into a
~/.vimpagerrc
.PD 0
.P
.PD
or ~/.vim/vimpagerrc or a file pointed to by the VIMPAGER_RC environment
.PD 0
.P
.PD
variable.
.PP
You can also have a global config file for all users in /etc/vimpagerrc,
it will
.PD 0
.P
.PD
be used if the user does not have a \f[C]\&.vimrc\f[] or
\f[C]\&.vimpagerrc\f[].
.PP
These are the keys for paging while in vimpager, they are the same as in
.PD 0
.P
.PD
less for the most part:
.PP
.TS
tab(@);
l l l l.
T{
\f[B]Key\f[]
T}@T{
\f[B]Action\f[]
T}@T{
\f[B]Key\f[]
T}@T{
\f[B]Action\f[]
T}
_
T{
Space
T}@T{
One page forward
T}@T{
b
T}@T{
One page backward
T}
T{
d
T}@T{
Half a page forward
T}@T{
u
T}@T{
Half a page backward
T}
T{
Enter
T}@T{
One line forward
T}@T{
k
T}@T{
One line backward
T}
T{
G
T}@T{
End of file
T}@T{
g
T}@T{
Start of file
T}
T{
N%
T}@T{
percentage in file
T}@T{
,h
T}@T{
Display this help
T}
T{
/pattern
T}@T{
Search forward
T}@T{
?pattern
T}@T{
Search backward
T}
T{
n
T}@T{
next match
T}@T{
N
T}@T{
Previous match
T}
T{
\f[C]:n\f[]
T}@T{
next file
T}@T{
\f[C]:N\f[]
T}@T{
Previous file
T}
T{
ESC\-u
T}@T{
toggle search highlight
T}@T{
T}@T{
T}
T{
q
T}@T{
Quit
T}@T{
,v
T}@T{
Toggle Less Mode
T}
.TE
.PP
The commands that start with \f[C],\f[] will use your value of
\f[C]g:mapleader\f[] if you set
.PD 0
.P
.PD
one instead.
.PP
To disable loading plugins, put \[lq]set noloadplugins\[rq] into a
vimpagerrc
.PD 0
.P
.PD
file.
.PP
You can also switch on \f[C]exists(\[aq]g:vimpager.enabled\[aq])\f[] in
your vimrc to set
.PD 0
.P
.PD
alternate settings for vimpager.
.PP
\f[B]WARNING:\f[] Option names have changed from the previous releases
to use a
.PD 0
.P
.PD
dict, if you use the old option names and check on
\f[C]exists(\[aq]g:vimpager\[aq])\f[]
.PD 0
.P
.PD
everything will work the same way, if you use the new option names you
must
.PD 0
.P
.PD
check \f[C]exists(\[aq]g:vimpager.enabled\[aq])\f[] instead.
.PP
\f[B]NOTE:\f[] Before setting the vimpager and less.vim related options
described
.PD 0
.P
.PD
below, make sure the \f[C]g:vimpager\f[] and \f[C]g:less\f[] dicts exist
like so:
.IP
.nf
\f[C]
let\ g:vimpager\ =\ {}
let\ g:less\ \ \ \ \ =\ {}
\f[]
.fi
.PP
If you want to disable less compatibility mode, and use regular vim
.PD 0
.P
.PD
motion commands, put this into your .vimrc/vimpagerrc:
.IP
.nf
\f[C]
let\ g:less.enabled\ =\ 0
\f[]
.fi
.PP
You can still enable less mode with this setting by pressing
\[lq],v\[rq].
If you
.PD 0
.P
.PD
define \f[C]g:mapleader\f[] then it will be the value of
\f[C]g:mapleader\f[] plus \f[C]v\f[]
.PD 0
.P
.PD
instead of \f[C],v\f[].
.PP
Put the following into your .vimrc/vimpagerrc if you want to use
gvim/MacVim
.PD 0
.P
.PD
for your pager window:
.IP
.nf
\f[C]
let\ g:vimpager.gvim\ =\ 1
\f[]
.fi
.PP
To turn off the feature of passing through text that is smaller than the
.PD 0
.P
.PD
terminal height use this:
.IP
.nf
\f[C]
let\ g:vimpager.passthrough\ =\ 0
\f[]
.fi
.PP
See \[lq]PASSTHROUGH MODE\[rq] further down.
.PP
To turn on line numbers set:
.IP
.nf
\f[C]
let\ g:less.number\ =\ 1
\f[]
.fi
.PP
they are turned off by default.
You can also invoke vimpager with the \f[C]\-N\f[]
.PD 0
.P
.PD
option to turn on line numbers.
.PP
To turn off search highlighting set:
.IP
.nf
\f[C]
let\ g:less.hlsearch\ =\ 0
\f[]
.fi
.PP
this can always be toggled with \f[C]ESC\-u\f[].
.PP
To start vim with \-X (no x11 connection, a bit faster startup) put the
following
.PD 0
.P
.PD
into your .vimrc/vimpagerrc:
.IP
.nf
\f[C]
let\ g:vimpager.X11\ =\ 0
\f[]
.fi
.PP
\f[B]NOTE:\f[] this may disable clipboard integration in X terminals.
.PP
The scroll offset (:help scrolloff), may be specified by placing the
.PD 0
.P
.PD
following into your .vimrc/vimpagerrc (default = 5, disable = 0):
.IP
.nf
\f[C]
let\ g:less.scrolloff\ =\ 5
\f[]
.fi
.PP
The default is 5 only in less mode, with less mode disabled the default
.PD 0
.P
.PD
is the user's scrolloff setting.
.PP
The process tree of vimpager is available in \f[C]vimpager.ptree\f[], an
example usage
.PD 0
.P
.PD
is as follows:
.IP
.nf
\f[C]
if\ exists(\[aq]g:vimpager.enabled\[aq])
\ \ if\ exists(\[aq]g:vimpager.ptree\[aq])\ &&\ g:vimpager.ptree[\-2]\ ==\ \[aq]wman\[aq]
\ \ \ \ set\ ft=man
\ \ endif
endif
\f[]
.fi
.PP
To disable the use of AnsiEsc.vim to display ANSI colors in the source,
.PD 0
.P
.PD
set:
.IP
.nf
\f[C]
let\ g:vimpager.ansiesc\ =\ 0
\f[]
.fi
.PP
see the section ANSI ESCAPE SEQUENCES AND
.PD 0
.P
.PD
OVERSTRIKES (#ansi-escape-sequences-and-overstrikes) for more details.
.PP
You can also set your own function for the message on the statusline via
.PD 0
.P
.PD
\f[C]g:less.statusfunc\f[], see \f[C]autoload/vimpager_utils.vim\f[] for
the default one as an
.PD 0
.P
.PD
example.
.SH USING FROM VIM
.PP
If you installed vimpager via Pathogen (#pathogen-installation) or added
it to
.PD 0
.P
.PD
your \f[C]runtimepath\f[], then the \f[C]Page\f[] command is available
from normal vim
.PD 0
.P
.PD
sessions, and it is also available when invoking the vimpager script.
.PP
If your global \f[C]keywordprg\f[] is set to \f[C]man\f[] or
\f[C]:Man\f[], which is the default, the
.PD 0
.P
.PD
plugin will reset it to \f[C]:Page!\\\ \-t\\\ man\f[] to page man pages
in a new tab.
See
.PD 0
.P
.PD
the example below for how to set this for other file types.
.PP
You may want to add something like the following to your
\f[C]\&.vimrc\f[] to enable the
.PD 0
.P
.PD
mapping to turn on less mode:
.IP
.nf
\f[C]
let\ g:mapleader\ =\ \[aq],\[aq]
runtime\ macros/less.vim
\f[]
.fi
.PP
Then \f[C],v\f[] will toggle less mode in any buffer.
The default \f[C]mapleader\f[] is \f[C]\\\f[].
.PP
\f[B]NOTE:\f[] If you are using Vim 7.3 or earlier, the Surround plugin
will conflict
.PD 0
.P
.PD
with less.vim mappings such as Ctrl\-D, on 7.4+ this is not an issue as
the
.PD 0
.P
.PD
\f[C]<nowait>\f[] tag is used for mappings.
.PP
The syntax of the \f[C]Page\f[] command is:
.PP
.TS
tab(@);
l l l l.
T{
\f[B]Command\f[]
T}@T{
\f[B]Option\f[]
T}@T{
\f[B]Arg\f[]
T}@T{
\f[B]Action\f[]
T}
_
T{
Page
T}@T{
\-t, \-v, \-w or \-b
T}@T{
file_path
T}@T{
open file in less mode
T}
T{
Page!
T}@T{
\-t, \-v, \-w or \-b
T}@T{
shell_command
T}@T{
open output of command in less mode
T}
T{
Page
T}@T{
T}@T{
T}@T{
toggle less mode for current file
T}
T{
Page!
T}@T{
T}@T{
T}@T{
turn on less mode for current file
T}
.TE
.PP
The option switch is optional and determines where the file or command
is
.PD 0
.P
.PD
opened:
.PP
.TS
tab(@);
l l.
T{
\f[B]Option\f[]
T}@T{
\f[B]Target\f[]
T}
_
T{
\-t
T}@T{
new tab
T}
T{
\-v
T}@T{
vertical split
T}
T{
\-w
T}@T{
new window
T}
T{
\-b
T}@T{
new buffer (default)
T}
.TE
.PP
The default is to open a new buffer.
.PP
For \f[C]Page!\f[] commands, STDERR is suppressed.
.PP
I recommend adding \f[C]set\ hidden\f[] to your \f[C]\&.vimrc\f[].
.PP
If the command is one of \f[C]man\f[], \f[C]perldoc\f[], \f[C]pydoc\f[]
or \f[C]ri\f[] it will be handled
.PD 0
.P
.PD
specially, overstrikes will be removed and \f[C]filetype\f[] will be set
to \f[C]man\f[] or
.PD 0
.P
.PD
\f[C]perldoc\f[].
.PP
Ansi escapes will be handled with \f[C]AnsiEsc\f[] if available, or
removed otherwise.
.PD 0
.P
.PD
See here (#ansi-escape-sequences-and-overstrikes) for details.
The
.PD 0
.P
.PD
\f[C]g:vimpager.ansiesc\f[] setting applies to the \f[C]Page\f[] command
if set.
.PP
Here is an example (that is already enabled in the plugin) of how you
can use
.PD 0
.P
.PD
this command to look up the python documentation for the module under
the cursor
.PD 0
.P
.PD
in a new tab:
.IP
.nf
\f[C]
autocmd\ FileType\ python\ setlocal\ keywordprg=:Page!\\\ \-t\\\ pydoc
\f[]
.fi
.PP
Then pressing \f[C]K\f[] on a module name under the cursor will open the
pydoc for it
.PD 0
.P
.PD
in a new tab.
.PP
This is done by default in the plugin now for python, ruby, perl and sh
(bash
.PD 0
.P
.PD
help.) The global default is man.
.SH COMMAND LINE OPTIONS
.SS \-h | \[en]help | \[en]usage
.PP
Print summary of options.
.SS \-v | \[en]version
.PP
Print the version information.
.SS + | +G
.PP
Start at the end of the file, just like less.
.SS \-N | \[en]LINE\-NUMBERS
.PP
Turn on line numbers, this can also be set with
\f[C]let\ g:less.number\ =\ 1\f[] .
.SS \-c cmd
.PP
Run a vim command after opening the file.
Multiple \-c arguments are
.PD 0
.P
.PD
supported.
.SS \[en]cmd cmd
.PP
Run a vim command when entering vim before anything else.
Multiple \[en]cmd
.PD 0
.P
.PD
arguments are supported.
.SS \-u vimrc
.PP
Use alternate .vimrc or .vimpagerrc.
.SS \-s
.PP
Squeeze blank lines into a single blank line.
GNU man passes this option to
.PD 0
.P
.PD
/usr/bin/pager.
.SS \-x
.PP
Enable debugging output for the shell script part of vimpager.
.SH ANSI ESCAPE SEQUENCES AND OVERSTRIKES
.PP
If your source is using ANSI escape codes, the AnsiEsc plugin will be
.PD 0
.P
.PD
used to show them, rather than the normal vim highlighting, however read
.PD 0
.P
.PD
the caveats below.
If this is not possible, they will be stripped out
.PD 0
.P
.PD
and normal vim highlighting will be used instead.
.PP
Overstrikes in man pages, perl, python or ruby docs will always be
removed.
.PP
vimpager bundles the
.PD 0
.P
.PD
AnsiEsc (http://www.vim.org/scripts/script.php?script_id=4979)
.PD 0
.P
.PD
plugin (it is expanded at runtime,
.PD 0
.P
.PD
there is nothing you have to do to enable it.)
.PP
However, your vim must have been compiled with the `conceal' feature
.PD 0
.P
.PD
enabled.
To check, try
.IP
.nf
\f[C]
:echo\ has(\[aq]conceal\[aq])
\f[]
.fi
.PP
if the result is `1' you have conceal, if it's `0' you do not, and the
.PD 0
.P
.PD
AnsiEsc plugin will not be enabled.
.PP
If you're on a Mac, the system vim does not enable this feature, install
.PD 0
.P
.PD
vim from Homebrew.
.PP
To disable the use of AnsiEsc.vim, set:
.IP
.nf
\f[C]
let\ g:vimpager.ansiesc\ =\ 0
\f[]
.fi
.PP
If the file has a modeline that sets ft or syntax, the setting will
override
.PD 0
.P
.PD
the use of AnsiEsc.
.PP
To turn off AnsiEsc while viewing a file, simply run
.IP
.nf
\f[C]
:AnsiEsc
\f[]
.fi
.PP
To turn off AnsiEsc on the commandline, use an invocation such as the
following:
.IP
.nf
\f[C]
vimpager\ \-c\ \[aq]set\ ft=&ft\[aq]\ somefile
\f[]
.fi
.PP
\f[B]NOTE:\f[] The \f[C]conceal\f[] feature of vim is still very buggy,
especially as
.PD 0
.P
.PD
concerns spacing, and the line wrapping in files highlighted with
\f[C]AnsiEsc\f[]
.PD 0
.P
.PD
will not be correct (they are wrapped too soon.) The tab stops will be
correct
.PD 0
.P
.PD
however, this is fixed up with a vim script.
.PP
\f[B]NOTE:\f[] \f[C]AnsiEsc\f[] is a work in progress, and will only
display files with
.PD 0
.P
.PD
simple ANSI codes correctly, such as that output by git tools.
More complex
.PD 0
.P
.PD
highlighting is likely not going to work right now.
We are working on this.
.SH PASSTHROUGH MODE
.PP
If the text sent to the pager is smaller than the terminal window, then
.PD 0
.P
.PD
it will be displayed without vim as text.
If it has ansi codes, they
.PD 0
.P
.PD
will be preserved, otherwise the text will be highlighted with vimcat.
.PP
You can turn this off by using:
.IP
.nf
\f[C]
let\ g:vimpager.passthrough\ =\ 0
\f[]
.fi
.SH CYGWIN/MSYS/MSYS2 NOTES
.PP
vimpager works correctly with the native Windows gvim, just put it in
.PD 0
.P
.PD
your PATH and set the vimpager_use_gvim option as described above.
.SH ENVIRONMENT
.PP
\f[C]VIMPAGER_VIM\f[] can be set to the vim binary you want to use, if
it starts with
.PD 0
.P
.PD
gvim or mvim then gui mode will be used.
Will fall back to \f[C]EDITOR\f[] if it
.PD 0
.P
.PD
contains vim.
.PP
You can specify the vimrc to use with the \f[C]VIMPAGER_RC\f[]
environment variable.
.PP
Setting \f[C]VIMPAGER_DEBUG\f[] to a non\-zero value will disable
suppressing vim
.PD 0
.P
.PD
errors on startup and when switching to the next file.
.SH AUTHORS
Lucas Hoffmann <l-m-h@web.de>; Abdó Roig\-Maranges <abdo.roig@gmail.com>; Rafael Kitover <rkitover@gmail.com>.
